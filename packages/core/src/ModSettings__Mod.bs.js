// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Vitest from "rescript-vitest/src/Vitest.bs.js";
import * as Vitest$1 from "vitest";
import * as S$RescriptSchema from "rescript-schema/src/S.bs.js";
import * as ModSettings__Info from "./ModSettings__Info.bs.js";

var schema = S$RescriptSchema.schema(function (s) {
      return {
              enabled: s.matches(S$RescriptSchema.bool),
              modLocation: s.matches(S$RescriptSchema.string),
              info: s.matches(ModSettings__Info.schema)
            };
    });

function reducer(state, action) {
  if (state.enabled) {
    if (action === "Enabled") {
      return state;
    } else {
      return {
              enabled: false,
              modLocation: state.modLocation,
              info: state.info
            };
    }
  } else if (action === "Enabled") {
    return {
            enabled: true,
            modLocation: state.modLocation,
            info: state.info
          };
  } else {
    return state;
  }
}

function make(enabled, modLocation, info) {
  return {
          enabled: enabled,
          modLocation: modLocation,
          info: info
        };
}

if (import.meta.vitest) {
  Vitest.test("enabled", undefined, (function (param) {
          var state_info = ModSettings__Info.make("", "", "", "", undefined);
          var state = {
            enabled: false,
            modLocation: "",
            info: state_info
          };
          var result = reducer(state, "Enabled");
          Vitest$1.expect(result).not.toBe(state);
          Vitest$1.expect(result.enabled).toBe(true);
        }));
  Vitest.test("disabled", undefined, (function (param) {
          var state_info = ModSettings__Info.make("", "", "", "", undefined);
          var state = {
            enabled: true,
            modLocation: "",
            info: state_info
          };
          var result = reducer(state, "Disabled");
          Vitest$1.expect(result).not.toBe(state);
          Vitest$1.expect(result.enabled).toBe(false);
        }));
}

export {
  schema ,
  reducer ,
  make ,
}
/* schema Not a pure module */
