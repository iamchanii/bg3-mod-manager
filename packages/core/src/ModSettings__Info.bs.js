// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Vitest from "rescript-vitest/src/Vitest.bs.js";
import * as Vitest$1 from "vitest";
import * as S$RescriptSchema from "rescript-schema/src/S.bs.js";
import * as ModSettings__InfoFile$Bg3ModManagerCore from "./ModSettings__InfoFile.bs.js";

var schema = S$RescriptSchema.schema(function (s) {
      return {
              folder: s.matches(S$RescriptSchema.string),
              md5: s.matches(S$RescriptSchema.string),
              name: s.matches(S$RescriptSchema.string),
              uuid: s.matches(S$RescriptSchema.string),
              version: s.matches(S$RescriptSchema.option(S$RescriptSchema.string))
            };
    });

function parse(__x) {
  return S$RescriptSchema.parseWith(__x, schema);
}

function make(folder, md5, name, uuid, version) {
  return {
          folder: folder,
          md5: md5,
          name: name,
          uuid: uuid,
          version: version
        };
}

function fromInfoFile(infoFile) {
  var match = infoFile.Mods;
  var len = match.length;
  if (len !== 1) {
    if (len !== 0) {
      return {
              TAG: "Error",
              _0: "Invalid mod info. Currently only supports single mod."
            };
    } else {
      return {
              TAG: "Error",
              _0: "Invalid mod info. Expected at least one mod."
            };
    }
  }
  var mod = match[0];
  return {
          TAG: "Ok",
          _0: make(mod.Folder, infoFile.MD5, mod.Name, mod.UUID, mod.Version)
        };
}

if (import.meta.vitest) {
  Vitest.test("make", undefined, (function (param) {
          Vitest$1.expect("folder").toEqual("folder");
          Vitest$1.expect("md5").toEqual("md5");
          Vitest$1.expect("name").toEqual("name");
          Vitest$1.expect("uuid").toEqual("uuid");
          Vitest$1.expect(undefined).toEqual(undefined);
        }));
  Vitest.describe("fromInfoFile", undefined, (function () {
          Vitest.it("should return error if mods is empty", undefined, (function (param) {
                  var result = fromInfoFile(ModSettings__InfoFile$Bg3ModManagerCore.makeWithMods([], "md5"));
                  Vitest$1.expect(result).toEqual({
                        TAG: "Error",
                        _0: "Invalid mod info. Expected at least one mod."
                      });
                }));
          Vitest.it("should return error if mods has more than one mod", undefined, (function (param) {
                  var result = fromInfoFile(ModSettings__InfoFile$Bg3ModManagerCore.makeWithMods([
                            {
                              Author: "",
                              Name: "",
                              Folder: "",
                              Version: undefined,
                              Description: "",
                              UUID: "",
                              Created: "",
                              Dependencies: [],
                              Group: ""
                            },
                            {
                              Author: "",
                              Name: "",
                              Folder: "",
                              Version: undefined,
                              Description: "",
                              UUID: "",
                              Created: "",
                              Dependencies: [],
                              Group: ""
                            }
                          ], "md5"));
                  Vitest$1.expect(result).toEqual({
                        TAG: "Error",
                        _0: "Invalid mod info. Currently only supports single mod."
                      });
                }));
          Vitest.it("should return ok with parsed info", undefined, (function (param) {
                  var result = fromInfoFile(ModSettings__InfoFile$Bg3ModManagerCore.make("", "AwesomeHair", "AwesomeHair", undefined, "", "looks-good-uuid-right", "", [], "", "md5-hash-right-here"));
                  Vitest$1.expect(result).toEqual({
                        TAG: "Ok",
                        _0: {
                          folder: "AwesomeHair",
                          md5: "md5-hash-right-here",
                          name: "AwesomeHair",
                          uuid: "looks-good-uuid-right",
                          version: undefined
                        }
                      });
                }));
        }));
}

export {
  schema ,
  parse ,
  make ,
  fromInfoFile ,
}
/* schema Not a pure module */
