// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Vitest from "rescript-vitest/src/Vitest.bs.js";
import * as Vitest$1 from "vitest";
import * as S$RescriptSchema from "rescript-schema/src/S.bs.js";
import * as ModSettings__Mod$Bg3ModManagerCore from "./ModSettings__Mod.bs.js";
import * as ModSettings__Info$Bg3ModManagerCore from "./ModSettings__Info.bs.js";

var schema = S$RescriptSchema.schema(function (s) {
      return {
              mods: s.matches(S$RescriptSchema.array(ModSettings__Mod$Bg3ModManagerCore.schema))
            };
    });

function reducer(state, action) {
  var mods = state.mods;
  switch (action.TAG) {
    case "Append" :
        return {
                mods: mods.concat([action._0])
              };
    case "Remove" :
        var uuid = action._0;
        return {
                mods: mods.filter(function (mod) {
                      return mod.info.uuid !== uuid;
                    })
              };
    case "Update" :
        var mod = action._0;
        return {
                mods: mods.map(function (m) {
                      if (m.info.uuid === mod.info.uuid) {
                        return mod;
                      } else {
                        return m;
                      }
                    })
              };
    
  }
}

function parse(__x) {
  return S$RescriptSchema.parseWith(__x, schema);
}

if (import.meta.vitest) {
  Vitest.test("append", undefined, (function (param) {
          var state = {
            mods: []
          };
          var mod = ModSettings__Mod$Bg3ModManagerCore.make(true, "", ModSettings__Info$Bg3ModManagerCore.make("folder", "md5", "mod name", "my-uuid", undefined));
          var action = {
            TAG: "Append",
            _0: mod
          };
          var result = reducer(state, action);
          Vitest$1.expect(result).toEqual({
                mods: [mod]
              });
        }));
  Vitest.test("remove", undefined, (function (param) {
          var state = {
            mods: [
              ModSettings__Mod$Bg3ModManagerCore.make(true, "", ModSettings__Info$Bg3ModManagerCore.make("folder", "md5", "mod name", "my-uuid", undefined)),
              ModSettings__Mod$Bg3ModManagerCore.make(true, "", ModSettings__Info$Bg3ModManagerCore.make("folder", "md5", "mod name", "my-uuid-2", undefined))
            ]
          };
          var result = reducer(state, {
                TAG: "Remove",
                _0: "my-uuid"
              });
          Vitest$1.expect(result).toEqual({
                mods: [ModSettings__Mod$Bg3ModManagerCore.make(true, "", ModSettings__Info$Bg3ModManagerCore.make("folder", "md5", "mod name", "my-uuid-2", undefined))]
              });
        }));
  Vitest.test("update", undefined, (function (param) {
          var state = {
            mods: [
              ModSettings__Mod$Bg3ModManagerCore.make(true, "", ModSettings__Info$Bg3ModManagerCore.make("folder", "md5", "mod name", "my-uuid", undefined)),
              ModSettings__Mod$Bg3ModManagerCore.make(true, "", ModSettings__Info$Bg3ModManagerCore.make("folder", "md5", "mod name", "my-uuid-2", undefined))
            ]
          };
          var action = {
            TAG: "Update",
            _0: ModSettings__Mod$Bg3ModManagerCore.make(false, "", ModSettings__Info$Bg3ModManagerCore.make("folder", "md5", "mod name - 2", "my-uuid", "1234"))
          };
          var result = reducer(state, action);
          Vitest$1.expect(result).toEqual({
                mods: [
                  ModSettings__Mod$Bg3ModManagerCore.make(false, "", ModSettings__Info$Bg3ModManagerCore.make("folder", "md5", "mod name - 2", "my-uuid", "1234")),
                  ModSettings__Mod$Bg3ModManagerCore.make(true, "", ModSettings__Info$Bg3ModManagerCore.make("folder", "md5", "mod name", "my-uuid-2", undefined))
                ]
              });
        }));
}

export {
  schema ,
  reducer ,
  parse ,
}
/* schema Not a pure module */
