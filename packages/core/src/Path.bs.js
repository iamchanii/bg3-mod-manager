// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Path from "path";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Vitest from "rescript-vitest/src/Vitest.bs.js";
import * as Vitest$1 from "vitest";

async function getBg3Path(platform, homedir) {
  var platform$1 = platform();
  if (platform$1 === "darwin") {
    return {
            TAG: "Ok",
            _0: Path.join(homedir(), "/Documents/Larian Studios/Baldur's Gate 3")
          };
  } else {
    return {
            TAG: "Error",
            _0: platform$1 + " is not supported"
          };
  }
}

async function getModsPath(platform, homedir) {
  var bg3Path = await getBg3Path(platform, homedir);
  if (bg3Path.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: Path.join(bg3Path._0, "Mods")
          };
  } else {
    return bg3Path;
  }
}

async function getTempPath(mkdtemp) {
  var tempPath;
  try {
    tempPath = await mkdtemp("bg3-mod-manager-");
  }
  catch (exn){
    return {
            TAG: "Error",
            _0: "Failed to create temp directory"
          };
  }
  return {
          TAG: "Ok",
          _0: tempPath
        };
}

async function getModSettingsPath(platform, homedir) {
  var bg3Path = await getBg3Path(platform, homedir);
  if (bg3Path.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: Path.join(bg3Path._0, "PlayerProfiles", "Public", "modsettings.lsx")
          };
  } else {
    return bg3Path;
  }
}

async function getConfigPath(platform, homedir) {
  var platform$1 = platform();
  if (platform$1 === "darwin") {
    return {
            TAG: "Ok",
            _0: Path.join(homedir(), "Library", "Preferences", "BG3ModManager")
          };
  } else {
    return {
            TAG: "Error",
            _0: platform$1 + " is not supported"
          };
  }
}

async function makeConfigPath(platform, homedir, mkdirRecursively) {
  var configPath = await getConfigPath(platform, homedir);
  if (configPath.TAG !== "Ok") {
    return {
            TAG: "Error",
            _0: configPath._0
          };
  }
  try {
    await mkdirRecursively(configPath._0);
    return {
            TAG: "Ok",
            _0: undefined
          };
  }
  catch (exn){
    return {
            TAG: "Error",
            _0: "Failed to create config directory"
          };
  }
}

if (import.meta.vitest) {
  Vitest.describe("getBg3Path", undefined, (function () {
          Vitest.testAsync("should return error if not unsupported platform", undefined, (async function (param) {
                  var result = await getBg3Path((function () {
                          return "linux";
                        }), (function () {
                          return "/Users/Player";
                        }));
                  return Vitest$1.expect(result).toEqual({
                              TAG: "Error",
                              _0: "linux is not supported"
                            });
                }));
          Vitest.testAsync("should return bg3 directory", undefined, (async function (param) {
                  var result = await getBg3Path((function () {
                          return "darwin";
                        }), (function () {
                          return "/Users/Player";
                        }));
                  return Vitest$1.expect(result).toEqual({
                              TAG: "Ok",
                              _0: "/Users/Player/Documents/Larian Studios/Baldur's Gate 3"
                            });
                }));
        }));
  Vitest.describe("getModsPath", undefined, (function () {
          Vitest.testAsync("should return error if not unsupported platform", undefined, (async function (param) {
                  var result = await getModsPath((function () {
                          return "linux";
                        }), (function () {
                          return "/Users/Player";
                        }));
                  return Vitest$1.expect(result).toEqual({
                              TAG: "Error",
                              _0: "linux is not supported"
                            });
                }));
          Vitest.testAsync("should return bg3 mod directory", undefined, (async function (param) {
                  var result = await getModsPath((function () {
                          return "darwin";
                        }), (function () {
                          return "/Users/Player";
                        }));
                  return Vitest$1.expect(result).toEqual({
                              TAG: "Ok",
                              _0: "/Users/Player/Documents/Larian Studios/Baldur's Gate 3/Mods"
                            });
                }));
        }));
  Vitest.describe("getTempPath", undefined, (function () {
          Vitest.testAsync("should return created temp directory path", undefined, (async function (param) {
                  var result = await getTempPath(async function (param) {
                        return "/tmp/bg3-mod-manager-1234";
                      });
                  return Vitest$1.expect(result).toEqual({
                              TAG: "Ok",
                              _0: "/tmp/bg3-mod-manager-1234"
                            });
                }));
          Vitest.testAsync("should return error if failed to create temp directory", undefined, (async function (param) {
                  var result = await getTempPath(async function (param) {
                        return Js_exn.raiseError("Error");
                      });
                  return Vitest$1.expect(result).toEqual({
                              TAG: "Error",
                              _0: "Failed to create temp directory"
                            });
                }));
        }));
  Vitest.describe("getModSettingsPath", undefined, (function () {
          Vitest.testAsync("should return error if not unsupported platform", undefined, (async function (param) {
                  var result = await getModsPath((function () {
                          return "linux";
                        }), (function () {
                          return "/Users/Player";
                        }));
                  return Vitest$1.expect(result).toEqual({
                              TAG: "Error",
                              _0: "linux is not supported"
                            });
                }));
          Vitest.testAsync("should return modsettings.lsx file path", undefined, (async function (param) {
                  var result = await getModSettingsPath((function () {
                          return "darwin";
                        }), (function () {
                          return "/Users/Player";
                        }));
                  return Vitest$1.expect(result).toEqual({
                              TAG: "Ok",
                              _0: "/Users/Player/Documents/Larian Studios/Baldur's Gate 3/PlayerProfiles/Public/modsettings.lsx"
                            });
                }));
        }));
  Vitest.describe("getConfigPath", undefined, (function () {
          Vitest.testAsync("should return error if not unsupported platform", undefined, (async function (param) {
                  var result = await getConfigPath((function () {
                          return "linux";
                        }), (function () {
                          return "/Users/Player";
                        }));
                  return Vitest$1.expect(result).toEqual({
                              TAG: "Error",
                              _0: "linux is not supported"
                            });
                }));
          Vitest.testAsync("should return config directory path", undefined, (async function (param) {
                  var result = await getConfigPath((function () {
                          return "darwin";
                        }), (function () {
                          return "/Users/Player";
                        }));
                  return Vitest$1.expect(result).toEqual({
                              TAG: "Ok",
                              _0: "/Users/Player/Library/Preferences/BG3ModManager"
                            });
                }));
        }));
  Vitest.describe("makeConfigPath", undefined, (function () {
          Vitest.testAsync("should return error if not unsupported platform", undefined, (async function (param) {
                  var result = await makeConfigPath((function () {
                          return "linux";
                        }), (function () {
                          return "/Users/Player";
                        }), (async function (param) {
                          
                        }));
                  return Vitest$1.expect(result).toEqual({
                              TAG: "Error",
                              _0: "linux is not supported"
                            });
                }));
          Vitest.testAsync("should return error if failed to create config directory", undefined, (async function (param) {
                  var result = await makeConfigPath((function () {
                          return "darwin";
                        }), (function () {
                          return "/Users/Player";
                        }), (async function (param) {
                          return Js_exn.raiseError("Error");
                        }));
                  return Vitest$1.expect(result).toEqual({
                              TAG: "Error",
                              _0: "Failed to create config directory"
                            });
                }));
          Vitest.testAsync("should return unit if config directory already exists", undefined, (async function (param) {
                  var result = await makeConfigPath((function () {
                          return "darwin";
                        }), (function () {
                          return "/Users/Player";
                        }), (async function (param) {
                          
                        }));
                  return Vitest$1.expect(result).toEqual({
                              TAG: "Ok",
                              _0: undefined
                            });
                }));
        }));
}

export {
  getBg3Path ,
  getModsPath ,
  getTempPath ,
  getModSettingsPath ,
  getConfigPath ,
  makeConfigPath ,
}
/*  Not a pure module */
